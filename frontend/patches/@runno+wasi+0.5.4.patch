diff --git a/node_modules/@runno/wasi/dist/lib/worker/wasi-host.d.ts b/node_modules/@runno/wasi/dist/lib/worker/wasi-host.d.ts
index c5a5474..cf4702a 100644
--- a/node_modules/@runno/wasi/dist/lib/worker/wasi-host.d.ts
+++ b/node_modules/@runno/wasi/dist/lib/worker/wasi-host.d.ts
@@ -5,12 +5,13 @@ export declare class WASIWorkerHostKilledError extends Error {
 }
 export declare class WASIWorkerHost {
     binaryURL: string;
+    binaryBuffer: ArrayBuffer;
     stdinBuffer: SharedArrayBuffer;
     context: WASIWorkerHostContext;
     result?: Promise<WASIExecutionResult>;
     worker?: Worker;
     reject?: (reason?: unknown) => void;
-    constructor(binaryURL: string, context: WASIWorkerHostContext);
+    constructor(binaryURL: string, binaryBuffer: ArrayBuffer, context: WASIWorkerHostContext);
     start(): Promise<WASIExecutionResult>;
     kill(): void;
     pushStdin(data: string): Promise<void>;
diff --git a/node_modules/@runno/wasi/dist/lib/worker/wasi-worker.d.ts b/node_modules/@runno/wasi/dist/lib/worker/wasi-worker.d.ts
index e273ea6..e1c1ff1 100644
--- a/node_modules/@runno/wasi/dist/lib/worker/wasi-worker.d.ts
+++ b/node_modules/@runno/wasi/dist/lib/worker/wasi-worker.d.ts
@@ -3,11 +3,17 @@ import type { WASIExecutionResult } from "../types";
 type WorkerWASIContext = Partial<Omit<WASIContextOptions, "stdin" | "stdout" | "stderr" | "debug">>;
 type StartWorkerMessage = {
     target: "client";
-    type: "start";
+    type: "startURL";
     binaryURL: string;
     stdinBuffer: SharedArrayBuffer;
 } & WorkerWASIContext;
-export type WorkerMessage = StartWorkerMessage;
+type StartWorkerBufferMessage = {
+    target: "client";
+    type: "startBuffer";
+    binaryBuffer: ArrayBuffer;
+    stdinBuffer: SharedArrayBuffer;
+} & WorkerWASIContext;
+export type WorkerMessage = StartWorkerMessage | StartWorkerBufferMessage;
 type StdoutHostMessage = {
     target: "host";
     type: "stdout";
diff --git a/node_modules/@runno/wasi/dist/wasi.js b/node_modules/@runno/wasi/dist/wasi.js
index f39bad4..f1b44a1 100644
--- a/node_modules/@runno/wasi/dist/wasi.js
+++ b/node_modules/@runno/wasi/dist/wasi.js
@@ -171,7 +171,7 @@ class at {
           }
         }, this.openFile(this.fs[h], a, l);
       }
-      return [c.ENOTCAPABLE];
+      return [c.ENOENT]; // quick dirty fix - wrong error code when accessing non-existing files
     }
   }
   close(t) {
@@ -258,7 +258,7 @@ class at {
       const l = `/${e}/`, s = Object.entries(this.fs).filter(([V]) => V.startsWith(l)), d = new S(Object.fromEntries(s), l).stat();
       return [c.SUCCESS, d];
     } else
-      return [c.ENOTCAPABLE];
+      return [c.ENOENT];
   }
   setFlags(t, e) {
     const n = this.openMap.get(t);
@@ -282,7 +282,7 @@ class at {
       return c.EBADF;
     const s = l.get(e);
     if (!s)
-      return c.ENOTCAPABLE;
+      return c.ENOENT;
     const d = new X(s, 0);
     return d.setAccessTime(n), d.sync(), c.SUCCESS;
   }
@@ -292,7 +292,7 @@ class at {
       return c.EBADF;
     const s = l.get(e);
     if (!s)
-      return c.ENOTCAPABLE;
+      return c.ENOENT;
     const d = new X(s, 0);
     return d.setModificationTime(n), d.sync(), c.SUCCESS;
   }
@@ -1427,7 +1427,9 @@ class Xt {
     }), this.debug = t == null ? void 0 : t.debug, this.isTTY = !!(t != null && t.isTTY);
   }
 }
-const tt = "", j = typeof window < "u" && window.Blob && new Blob([atob(tt)], { type: "text/javascript;charset=utf-8" });
+const tt =
+    ""
+    ,j = typeof window < "u" && window.Blob && new Blob([atob(tt)], { type: "text/javascript;charset=utf-8" });
 function ot() {
   let i;
   try {
@@ -1446,15 +1448,16 @@ function ut(i, t) {
 class St extends Error {
 }
 class Gt {
-  constructor(t, e) {
+  constructor(url, buf, e) {
     m(this, "binaryURL");
+    m(this, "binaryBuffer");
     // 8kb should be big enough
     m(this, "stdinBuffer", new SharedArrayBuffer(8 * 1024));
     m(this, "context");
     m(this, "result");
     m(this, "worker");
     m(this, "reject");
-    this.binaryURL = t, this.context = e;
+    this.binaryURL = url, this.binaryBuffer = buf, this.context = e;
   }
   async start() {
     if (this.result)
@@ -1480,9 +1483,9 @@ class Gt {
             e(l.error);
             break;
         }
-      }), ut(this.worker, {
+      }), ut(this.worker, this.binaryURL ? {
         target: "client",
-        type: "start",
+        type: "startURL",
         binaryURL: this.binaryURL,
         stdinBuffer: this.stdinBuffer,
         // Unfortunately can't just splat these because it includes types
@@ -1491,6 +1494,17 @@ class Gt {
         env: this.context.env,
         fs: this.context.fs,
         isTTY: this.context.isTTY
+      } : {
+        target: "client",
+        type: "startBuffer",
+        binaryBuffer: this.binaryBuffer,
+        stdinBuffer: this.stdinBuffer,
+        // Unfortunately can't just splat these because it includes types
+        // that can't be sent as a message.
+        args: this.context.args,
+        env: this.context.env,
+        fs: this.context.fs,
+        isTTY: this.context.isTTY
       });
     }), this.result;
   }
